#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QtCharts/QBarSet>
#include <QListWidget>
#include <QAction>
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    ui->treeWidget->setContextMenuPolicy(Qt::CustomContextMenu);

    connect(ui->treeWidget, SIGNAL(itemClicked(QTreeWidgetItem*, int)), this, SLOT(onProjectTreeWidgetClicked(QTreeWidgetItem*, int)));
    connect(ui->treeWidget_2, SIGNAL(itemClicked(QTreeWidgetItem*, int)), this, SLOT(onProjectTreeWidgetClicked_Verify(QTreeWidgetItem*, int)));
    ui->treeWidget->setHeaderLabel("Projects");
    ui->treeWidget_2->setHeaderLabel("Projects");
    ui->treeWidget->setContextMenuPolicy(Qt::ActionsContextMenu);
    ui->treeWidget_2->setContextMenuPolicy(Qt::ActionsContextMenu);
    QStringList actions = (QStringList() << "Open File"<<"Remove File" << "Delete File" << "Rename");

    for(QString action_item : actions) {
        action = new QAction(action_item, this);
        ui->treeWidget->addAction(action);
    }
}

MainWindow::~MainWindow()
{
    delete ui;
}


//Open File Tool Bar
void MainWindow::on_actionOpen_File_triggered()
{
    QString fileName = QFileDialog::getOpenFileName(this, tr("Open File"),"/home",tr("All Files *.*"));
    openFile(fileName, "edit");
    currentFileDirectory = fileName;
}

//Save File Tool Bar
void MainWindow::on_actionSave_File_triggered()
{
    QTextDocument *doc = ui->plainTextEdit->document();

    QFile file(currentFileDirectory);
    if (file.open(QIODevice::ReadWrite | QIODevice::Truncate| QIODevice::Text)) {
        QTextStream stream(&file);

        for(int i = 0; i < doc->blockCount(); i++) {
            QTextBlock tb = doc->findBlockByLineNumber(i);
            stream << tb.text() + "\n";
        }
    }
}

//Create New Project Tool Bar
void MainWindow::on_actionCreate_New_Project_Files_triggered()
{
    np = new NewProject();
    np->exec();
}

//Open Project Tool Bar
void MainWindow::on_actionOpen_Project_triggered()
{
    QString dir = QFileDialog::getExistingDirectory(this, tr("Open Directory"),"/home",QFileDialog::ShowDirsOnly | QFileDialog::DontResolveSymlinks);
    qDebug() << dir;
    if(dir != "") {
        QDir directory(dir);
        QStringList files = directory.entryList(QStringList() << "*.adc" << "*.ADC",QDir::Files);
        int pos = dir.lastIndexOf("/");
        QString projectName = dir.mid(pos+1,dir.size()-pos);
        dirMap[projectName] = dir;
        QTreeWidgetItem *project = new QTreeWidgetItem(ui->treeWidget);
        project->setText(0, projectName);
        foreach(QString filename, files) {
            qDebug() << filename;
            QTreeWidgetItem *file = new QTreeWidgetItem(project);
            file->setText(0, filename);
        }
        QTreeWidgetItem *project2 = new QTreeWidgetItem(ui->treeWidget_2);
        project2->setText(0, projectName);
        foreach(QString filename, files) {
            qDebug() << filename;
            QTreeWidgetItem *file2 = new QTreeWidgetItem(project2);
            file2->setText(0, filename);
        }
    }
}

//Tree widget item click event
void MainWindow::onProjectTreeWidgetClicked(QTreeWidgetItem *item, int column)
{
    if(item->parent())
    {
        currentFileDirectory = dirMap[item->parent()->text(0)] + "/" + item->text(column);
        openFile(currentFileDirectory, "edit");
    }
}

//Verify Tree Wiget click event
void MainWindow::onProjectTreeWidgetClicked_Verify(QTreeWidgetItem * item, int column)
{
    if(item->parent())
    {
        openFile(dirMap[item->parent()->text(column)] + "/" + item->text(column), "verify");
    }
}

//Open File Function
void MainWindow::openFile(QString fileName, QString ev)
{
    currentfile.clear();
    QString board;
    QFile file(fileName);
    int fma1_count = 0;
    int fma2_count = 0;

    //Load File and store in vector/fill edit area or verify area
    if(!file.exists()){
        qDebug() << "No file exists";
    }
    else {
        QString line;

        ui->listWidget->clear();

        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            ui->plainTextEdit->clear();
            QTextStream stream(&file);
            while (!stream.atEnd()){
                //read the current line in the stream
                line = stream.readLine();

                //find boardtype of the file and then store -- this is for the bar chart setup
                if(line.indexOf("//Boardtype") != -1) {
                    int boardTypePos = line.indexOf(":");
                    board = line.mid(boardTypePos + 1, line.size() - boardTypePos).trimmed();
                    qDebug() << board;
                }

                //check to see if it is the edit area
                if(ev == "edit") {


                    ui->plainTextEdit->setPlainText(ui->plainTextEdit->toPlainText()+line+"\n");
                }

                //store each line in file
                currentfile.push_back(line);
            }
        }
        file.close();
    }

    if(ev == "verify") {
        QVector<QString> analysis;
        Verify *v;
        if(board == "AEB101") {
            v = new Verify();
            analysis = v->returnTemplate_AEB();
        } else if(board =="COM-WNC") {
            v= new Verify();
            analysis = v->returnTemplate_COM();
        }

        QListWidgetItem *item;
        for(int i = 0; i < currentfile.size(); i++) {
            item = new QListWidgetItem();
            item->setText(currentfile[i]);
            if(currentfile[i].indexOf("PROTECTED") > -1 || currentfile[i].indexOf("FIXED") > -1) {
                item->setBackground(QColor("red"));
            } else {
                item->setBackground(QColor("white"));
            }

            if(currentfile[i].indexOf("CONFIGURABLE") > -1) {
                item->setBackground(QColor("yellow"));
            }

            ui->listWidget->addItem(item);
        }
    }

    //Bar Chart Setup
    if(board == "AEB101") {
        ui->graphicsView->items().clear();
        fma1_count = 0;
        fma2_count = 0;
        QBarSet *fma1 = new QBarSet("FMA1");
        QBarSet *fma2 = new QBarSet("FMA2");
        QVector<QString> nfile = currentfile.mid(177, currentfile.size());
        for(QString line : nfile) {
            if(line.indexOf("CFG_ZP_FMA1 ") != -1) {
                fma1_count++;
            } else if(line.indexOf("CFG_ZP_FMA2") != -1) {
                fma2_count++;
            }
        }

        *fma1 << fma1_count;
        *fma2 << fma2_count;
        QBarSeries *series = new QBarSeries();
        series->append(fma1);
        series->append(fma2);
        QChart *chart = new QChart();
        chart->addSeries(series);
        chart->setTitle("Data");
        chart->setAnimationOptions(QChart::SeriesAnimations);
        QBarCategoryAxis *axisX = new QBarCategoryAxis();
        QStringList categories;
        categories << "Track Section";
        axisX->append(categories);
        chart->addAxis(axisX, Qt::AlignBottom);
        series->attachAxis(axisX);

        QValueAxis *axisY = new QValueAxis();
        axisY->setRange(0,20);
        axisY->setTitleText("AEB Count");
        chart->addAxis(axisY, Qt::AlignLeft);
        series->attachAxis(axisY);

        chart->legend()->setVisible(true);
        chart->legend()->setAlignment(Qt::AlignBottom);

        ui->graphicsView->setChart(chart);
        ui->graphicsView->setRenderHint(QPainter::Antialiasing);
    }
    else if(board == "COM-WNC") {
        qDebug() << "Creating COM Chart";
    }
}


//Save As
void MainWindow::on_actionSave_As_triggered()
{
    QTextDocument *doc = ui->plainTextEdit->document();

    QString filePath = QFileDialog::getSaveFileName(this, "Save As" , QDir::currentPath());

    QFile file(filePath);
    if (file.open(QIODevice::ReadWrite | QIODevice::Truncate| QIODevice::Text)) {
        QTextStream stream(&file);

        for(int i = 0; i < doc->blockCount(); i++) {
            QTextBlock tb = doc->findBlockByLineNumber(i);
            stream << tb.text() + "\n";
        }
    }
}


//Search Button
void MainWindow::on_pushButton_clicked()
{
    QString plainTextEditContents = ui->plainTextEdit->toPlainText();
    QStringList lines = plainTextEditContents.split("\n");
    QString stringDoc = plainTextEditContents;
    int pos = 0;
    int pos2 = 0;
    QTextCursor cursor(ui->plainTextEdit->document());

    for(int i = 0; i < lines.size(); i++) {
        QTextCursor cursor(ui->plainTextEdit->document());
        QTextCharFormat fmt;

        fmt.setBackground(QColor("white"));
        cursor.setPosition(stringDoc.indexOf(ui->lineEdit->text(), pos));
        qDebug() << cursor.position();
        cursor.select(QTextCursor::LineUnderCursor);
        cursor.setCharFormat(fmt);

        pos2 += lines[i].size();
    }


    for(int i = 0; i < lines.size(); i++) {
        QTextCursor cursor(ui->plainTextEdit->document());
        QTextCharFormat fmt;
        if(lines[i].indexOf(ui->lineEdit->text()) != -1) {
            fmt.setBackground(QColor("#FADA5E"));
            cursor.setPosition(stringDoc.indexOf(ui->lineEdit->text(), pos));
            qDebug() << cursor.position();
            cursor.select(QTextCursor::LineUnderCursor);
            cursor.setCharFormat(fmt);
        }
        pos += lines[i].size();
    }
}

//Close Project Button from tool bar -> not working
void MainWindow::on_actionClose_Project_triggered()
{
    ui->plainTextEdit->clear();
    ui->treeWidget->clear();
}

//Close File Button from tool bar -> not working
void MainWindow::on_actionClose_File_triggered()
{
    ui->plainTextEdit->clear();
    ui->graphicsView->items().clear();
}

//Quick Verify button from tool bar
void MainWindow::on_actionVerify_AEB_File_triggered()
{
    QString fileName = QFileDialog::getOpenFileName(this, tr("Open File"),"/home",tr("All Files *.*"));
    openFile(fileName, "verify");
    currentFileDirectory = fileName;
    ui->tabWidget->setCurrentIndex(1);
}

//Quick Verify button from tool bar
void MainWindow::on_actionVerify_COM_FILE_triggered()
{
    QString fileName = QFileDialog::getOpenFileName(this, tr("Open File"),"/home",tr("All Files *.*"));
    openFile(fileName, "verify");
    currentFileDirectory = fileName;
    ui->tabWidget->setCurrentIndex(1);
}

void MainWindow::on_pushButton_2_clicked()
{
    QString plainTextEditContents = ui->plainTextEdit->toPlainText();
    QStringList lines = plainTextEditContents.split("\n");
    QString stringDoc = plainTextEditContents;

    QTextCursor cursor(ui->plainTextEdit->document());
    int pos = 0;
    for(int i = 0; i < lines.size(); i++) {
        QTextCursor cursor(ui->plainTextEdit->document());
        QTextCharFormat fmt;

        fmt.setBackground(QColor("white"));
        cursor.setPosition(stringDoc.indexOf(ui->lineEdit->text(), pos));
        qDebug() << cursor.position();
        cursor.select(QTextCursor::LineUnderCursor);
        cursor.setCharFormat(fmt);

        pos += lines[i].size();
    }
}
