#ifndef NEWPROJECT_H
#define NEWPROJECT_H

#include <QDialog>
#include "fma.h"
#include "dataforwarding.h"
#include <iostream>
#include <ctime>
#include <QMessageBox>
#include <QTreeWidget>
#include <QAction>
struct AEB {
    QVector<FMA*> fmaArr;
    QString evaluatorName;
    QString AEB_Id;
    QString generationTime;
};

struct WNC_AEB_DATA {
    bool transfer_to_treadle;
    bool transfer_FMA1_to_IXL;
    bool transfer_FMA2_to_IXL;
    int aeb_id;
};

struct Evaluator_RD {
     QVector<int> IP_A;
     QVector<int> IP_B;
     QVector<DFB*> dataForwardingArr;
};

struct COM {
    //Header
    QString COM_ID;
    QString Evaluator_Name;

    //basic configuration
    QVector<int> IP_A_BASIC;
    QVector<int> IP_B_BASIC;
    QVector<int> IP_A_BASIC_DG;
    QVector<int> IP_B_BASIC_DG;
    int IP_A_BASIC_SM;
    int IP_B_BASIC_SM;

    //Remote Destination
    QVector<int> IP_RD_FDS_A;
    QVector<int> IP_RD_FDS_B;
    QVector<int> IP_RD_TF_A;
    QVector<int> IP_RD_TF_B;
    QVector<Evaluator_RD*> IP_RD_EVAL_ARR;

    //Remote System (ACP/IXL)
    QVector<int> ACP_Primary_IP_A;
    QVector<int> ACP_Primary_IP_B;
    QVector<int> ACP_Secondary_IP_A;
    QVector<int> ACP_Secondary_IP_B;

    //WNC Message Addressing
    int wnc_NetTraceID;
    int wnc_WestTraceAddress;
    int wnc_pdv;
    int wnc_DestPort; // limited to a range between 41-79

    //Data on WNC Link (AEB data)
    QVector<WNC_AEB_DATA*> WNC_AEB_DATA_Arr;

    //Footer
    QString projectNum;
    QString generationTime;
};

namespace Ui {
class NewProject;
}

class NewProject : public QDialog
{
    Q_OBJECT

public:
    explicit NewProject(QWidget *parent = nullptr);
    ~NewProject();

    QString returnGenTime();
    QVector<AEB*> returnAEBarr();
    QVector<COM*> returnCOMarr();
    QString returnProjectNumber();
    QString timeCheck(QString time);

    void displayError(QString errorMessage);
public slots:
    void fmaSignalReceived(FMA*);
    void dfbSignalReceived(QVector<DFB*> dfbArray);
    void onRemoveButtonClicked();
    void onRemoveEvaluatorClicked();
    void onRemoveDataLinkClicked();
    void onRemoveFile_AEB();
    void onRemoveFile_COM();

private slots:


    void on_pushButton_clicked();

    void updateFMApreview(FMA*);

    void updatePPpreview(AEB*);
    void updatePPpreview(COM*);

    void on_pushButton_2_clicked();

    void on_pushButton_3_clicked();

    void onPreviewTreeWidgetClicked_aeb(QTreeWidgetItem *item, int column);

    void on_pushButton_7_clicked();

    void on_pushButton_10_clicked();

    void on_pushButton_8_clicked();

    void on_pushButton_6_clicked();

    void on_pushButton_5_clicked();

    void on_pushButton_4_clicked();

    void on_pushButton_9_clicked();

private:

    void clearComInterface();


    Ui::NewProject *ui;
    FMA *fma;
    COM *com = nullptr;
    DataForwarding *df;
    QVector<DFB*> dfbArr;
    AEB *aeb = nullptr;
    QVector<AEB*> aebArr;
    QVector<FMA*> fmaArr;
    QVector<COM*> comArr;
    QString projectNumber;




    QStringList ipHeaderLabels;
    QStringList ipBasicLabels;
    QStringList ipRemoteSystemLabels;

};



#endif // NEWPROJECT_H
